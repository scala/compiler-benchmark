#!/usr/bin/env bash

cpuFrequency=3400

cpuShield=1-3

# processName:serviceName1:serviceName2:...
read -r -d '' servicesToStop << EOM
atd:atd.service
acpid:acpid.service:acpid.socket:acpid.path
cron:cron.service
dbus-daemon:dbus.service:dbus.socket
irqbalance:irqbalance.service
rsyslogd:rsyslog.service:syslog.socket
EOM

kernelRelease="4.9.0-0.bpo.2-amd64"

# These cannot be written (IO Error)
irqAffinitySkip=( /proc/irq/0/smp_affinity /proc/irq/2/smp_affinity )
irqAffinityFile="savedIrqAffinity"

set -eo pipefail

scriptDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $scriptDir

# Utils

function logOk() {
  echo " - [ok] $1"
}

function err() {
  echo "[error] $1"
  shift
  while [[ $# -gt 0 ]]; do
    echo "$1"
    shift
  done
  exit 42
}

function checkFail() {
  [[ $1 -eq 0 ]] || err "failed to $2" $3
}

function sudoWrite() {
  echo "$1" | sudo tee $2 > /dev/null
}

# Systm Config Checks

function checkKernelRelease() {
  [[ $(uname -r) == $kernelRelease ]] ||
    err "expected kernel release $kernelRelease, found $(uname -r)"
  logOk "found expected kernel release"
}

function checkNoHyperThreading() {
  local perCore=$(lscpu | sed 's/ *: */:/' | awk -F ":" '$1 == "Thread(s) per core" { print $2 }')
  [[ "$perCore" == "1" ]] ||
    err "hyper-threading seems to be enabled, lscpu reports $perCore threads per core"
  logOk "hyper-threading is disabled"
}

function checkNoTurboBoost() {
  local tb=$(cpupower frequency-info | awk '/.*boost\ state\ support.*/{y=1;next}/.*Active.*/{y=0}y')
  [[ "$tb" =~ ^.*Supported:\ no$ ]] ||
    err "expected turbo boost to be disabled, 'cpupower frequency-info' reports $tb"
  logOk "turbo boost is disabled"
}

function checkNoNuma() {
  local numaNodes=$(numactl --hardware | sed 's/ *: */:/' | awk -F ":" '$1 == "available" { print $2 }' | awk '{ print $1 }')
  [[ "$numaNodes" == "1" ]] ||
    err "expected 1 numa node, numactl returned $numaNodes"
  logOk "the system has 1 numa node"
}

function checkNoPstate() {
  local freqDriver=$(cpupower frequency-info | grep "driver:")
  [[ "$freqDriver" =~ ^.*driver:\ acpi-cpufreq$ ]] ||
    err "expected acpi-cpufreq CPU frequency driver, 'cpupower frequency-info' reports $freqDriver"
  logOk "the CPU frequency driver is acpi-cpufreq"
}

function checkRunningProcesses() {
  local pss=$(ps -e -o comm,args --no-headers)
  pss=$(echo "$pss" | sed 's/ \+/_/g' | sort)
  local ok
  local prefixes=$(cat ./processWhitelist | awk '{ print $1 }')
  for p in $pss; do
    ok=0
    for pre in $prefixes; do
      [[ $p = $pre* && "$pre" != "" ]] && {
        ok=1
        break
      }
    done
    [[ $ok == 1 ]] ||
      err "process $p is not listed in $scriptDir/processWhitelist"
  done
  logOk "all running processes are listed in $scriptDir/processWhitelist"
}

# Services

function stopServices() {
  local pid
  for s in $servicesToStop; do
    echo $s |  tr : " " | {
      read process services
      # In case there's a running job, the command prints "Job for rsyslog.service canceled" and
      # exits non-zero. The services are still stopped (we check that after), so we continue.
      sudo systemctl stop $services > /dev/null 2>&1 || true
      pid=$(pgrep -x "$process" || true)
      [[ $pid == "" ]] ||
        err "failed to stop service $services, $process still running with PID $pid"
      logOk "stopped service $services"
    }
  done
}

function startServices() {
  for s in $servicesToStop; do
    echo $s |  tr : " " | {
      read process services
      sudo systemctl start $services
      logOk "started service $services"
    }
  done
}

# CPU Frequency

function setFrequency() {
  sudo cpupower -c all frequency-set -f ${cpuFrequency}MHz > /dev/null

  local freqs=$(cat /proc/cpuinfo | grep MHz)
  local c=$(echo "$freqs" | grep $cpuFrequency.000 | wc -l)
  [[ "$c" != "4" ]] ||
    err "expected /proc/cpuinfo to show $cpuFrequency.000 MHz for all processors" $freqs

  local govs=$(cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor)
  local c=$(echo "$govs" | grep userspace | wc -l)
  [[ "$c" != "4" ]] ||
    err "expected 'cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor' to show userspace for all processors" $govs

  logOk "CPU frequency set to $cpuFrequency MHz"
}

function resetFrequency() {
  sudo cpupower -c all frequency-set -g ondemand > /dev/null

  local govs=$(cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor)
  local c=$(echo "$govs" | grep ondemand | wc -l)
  [[ "$c" == "4" ]] ||
    err "expected 'cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor' to show ondemand for all processors" $govs

  logOk "CPU frequency scaling governor set to 'ondemand'"
}

# CPU Shield

function checkNoShield() {
  local shield=$(sudo cset shield)
  [[ "$shield" =~ ^.*shielding\ not\ active\ on\ system$ ]] ||
    err "expected no shielding" $shield
  logOk "shielding is disabled"
}

function checkShield() {
  local userSet=$(sudo cset shield -s | grep '"user"')
  [[ "$userSet" =~ ^.*CPUSPEC\($cpuShield\)\ with\ 0\ tasks.*$ ]] ||
    err "expected empty user CPU set: $userSet"
  logOk "CPU set 'user' is empty"

  local sysSet=$(sudo cset shield -u | grep '"system"')
  [[ "$sysSet" =~ ^.*CPUSPEC\(0\)\ with\ [0-9]+\ tasks.*$ ]] ||
    err "expected system CPU set: $sysSet"
  logOk "CPU set 'system' exists"
}

function setupShield() {
  resetShield

  local log
  log=$(sudo cset shield -c $cpuShield)
  checkFail $? "create shield" "$log"
  logOk "created CPU shield $cpuShield"

  log=$(sudo cset shield -k on)
  checkFail $? "shield kernel processes" "$log"
  logOk "moved kernel processes to 'system' CPU set"

  checkShield
}

function resetShield() {
  local log
  sudo cset shield -r > /dev/null || true
  logOk "removed CPU shield"
  checkNoShield
}

# Interrupt Affinity

function noIrqAffinitySkip() {
  local noSkip=0 # true
  for i in "${irqAffinitySkip[@]}"; do
    [[ $i == $1 ]] && {
      noSkip=1 # false
      break
    }
  done
  return $noSkip
}

function writeIrqAffinity() {
  local f=$1
  local save=$2
  [[ $save == 1 ]] && echo "$f:$(cat $f)" > $irqAffinityFile
  sudoWrite 1 $f
  [[ $(cat $f) == 1 ]] ||
    err "failed to set interrupt affinity of $f to 1"
}

function setupIrqAffinity() {
  local save=0
  [[ -e $irqAffinityFile ]] || save=1

  writeIrqAffinity "/proc/irq/default_smp_affinity" $save

  for f in $(ls /proc/irq/*/smp_affinity); do
    if noIrqAffinitySkip $f; then
      writeIrqAffinity $f $save
    fi
  done

  logOk "set interrupt affinity files to 1"
}

function resetIrqAffinity() {
  [[ -e $irqAffinityFile ]] && {
    for l in $(cat $irqAffinityFile); do
      echo $l | tr : " " | {
        read file mask
        [[ -e $file ]] && sudoWrite $mask $file
      }
    done
    rm $irqAffinityFile
  }
  logOk "restored interrupt affinity files"
}

# Script infra

function usage() {
cat << EOM
Usage: $1 [set|reset] [opts]
  -ns: don't stop services
  -nf: don't set a fixed CPU frequency ($cpuFrequency)
  -nl: don't set up a shielded CPU set ($cpuShield)
  -ni: don't set the affinity for intetrupt handlers to CPU 1
EOM
  exit 42
}

function parseArgs() {
  [[ $# -gt 0 ]] || usage $0
  mode="$1"
  shift

  optServices=1
  optFrequency=1
  optShield=1
  optIrqAffinity=1

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -ns)
        optServices=0
        ;;
      -nf)
        optFrequency=0
        ;;
      -nl)
        optShield=0
        ;;
      -ni)
        optIrqAffinity=0
        ;;
      *)
        echo "Unknown option: $1"
        usage $0
        ;;
    esac
    shift
  done
}

parseArgs "$@"

case $mode in
  set)
    echo "Checking machine configuration"
    checkKernelRelease
    checkNoHyperThreading
    checkNoTurboBoost
    checkNoNuma
    checkNoPstate
    checkRunningProcesses

    echo "Setting benchmarking environment"
    [[ $optServices    -eq 1 ]] && stopServices
    [[ $optFrequency   -eq 1 ]] && setFrequency
    [[ $optShield      -eq 1 ]] && setupShield
    [[ $optIrqAffinity -eq 1 ]] && setupIrqAffinity
    ;;

  reset)
    echo "Resetting benchmarking environment"
    resetIrqAffinity
    resetShield
    resetFrequency
    startServices
    ;;
  
  *)
    echo "Unknown mode: $mode"
    usage $0
    ;;
esac
